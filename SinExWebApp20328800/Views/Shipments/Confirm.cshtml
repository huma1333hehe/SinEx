<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Content/jquery-ui-timepicker-addon.min.css" rel="stylesheet" />
@model SinExWebApp20328800.Models.Shipment

@{
    ViewBag.Title = "Confirm";
}

<h2>Confirm</h2>

<h3>Are you sure you want to confirm this shipment? </h3>
<h3>After confirmed, the shipment can not be edit but can be cancelled if it has not been picked up.</h3>
<div>
    <h4>Shipment</h4>
    <hr />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Shipment</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.WaybillId)
            @Html.HiddenFor(model => model.ReferenceNumber)
            @Html.HiddenFor(model => model.NumberOfPackages)
            @Html.HiddenFor(model => model.SenderShippingAccountID)
            @Html.HiddenFor(model => model.ShipmentPayer)
            @Html.HiddenFor(model => model.TaxPayer)
            @Html.HiddenFor(model => model.Duty)
            @Html.HiddenFor(model => model.Tax)
            @Html.HiddenFor(model => model.ConfirmOrNot)
            @Html.HiddenFor(model => model.PickupOrNot)
            @Html.HiddenFor(model => model.ServiceTypeID)
            @Html.HiddenFor(model => model.RecipientShippingAccountID)
            @Html.HiddenFor(model => model.Origin)
            @Html.HiddenFor(model => model.Destination)
            @Html.HiddenFor(model => model.RecipientAddressNickname)
            @Html.HiddenFor(model => model.RecipientFullName)
            @Html.HiddenFor(model => model.RecipientCompanyName)
            @Html.HiddenFor(model => model.RecipientDepartmentName)
            @Html.HiddenFor(model => model.RecipientDeliveryBuilding)
            @Html.HiddenFor(model => model.RecipientDeliveryStreet)
            @Html.HiddenFor(model => model.RecipientDeliveryCity)
            @Html.HiddenFor(model => model.RecipientDeliveryProvince)
            @Html.HiddenFor(model => model.RecipientDeliveryPostcode)
            @Html.HiddenFor(model => model.RecipientPhoneNumber)
            @Html.HiddenFor(model => model.RecipientEmail)

            <div class="form-group">
                <label class="control-label col-md-2" for="PickupLocation">Pickup Location Nickname</label>
                <div class="col-md-10">
                    @Html.DropDownList("PickupLocationNickname", null, "Add new...", htmlAttributes: new { @class = "form-control", onchange = "OnPickupLocationNicknamesChange(this)" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PickupLocation, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PickupLocation, new { htmlAttributes = new { @class = "form-control", id = "PickupLocation_edit" } })
                    @Html.ValidationMessageFor(model => model.PickupLocation, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PickupType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EnumDropDownListFor(model => model.PickupType, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PickupType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PickupDate, "Pickup Date", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PickupDate, new { htmlAttributes = new { @class = "form-control date-time-picker" } })
                    @Html.ValidationMessageFor(model => model.PickupDate, "", new { @class = "text-danger" })
                </div>
            </div>


            @if (Model.Packages != null && Model.NumberOfPackages != 0)
            {
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Confirm" class="btn btn-default" />
                    </div>
                </div>
            }
            else
            {
                <h2>Can not confirm because there are no packages for this shipment</h2>
            }


        </div>
    }


    <dl class="dl-horizontal">
        <dt>
            Sender User Name
        </dt>
        <dd>
            @Html.DisplayFor(model => model.SenderShippingAccount.UserName)
        </dd>
        @if (Model.ShipmentPayer == SinExWebApp20328800.Models.ShipmentPayer.Recipient || Model.TaxPayer == SinExWebApp20328800.Models.TaxPayer.Recipient)
        {
            <dt>
                Recipient User Name
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RecipientShippingAccount.UserName)
            </dd>
        }
        <dt>
            @Html.DisplayNameFor(model => model.ServiceType.Type)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ServiceType.Type)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ReferenceNumber)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ReferenceNumber)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Origin)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Origin)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Destination)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Destination)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.NumberOfPackages)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.NumberOfPackages)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ShipmentPayer)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ShipmentPayer)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TaxPayer)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TaxPayer)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Duty)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Duty)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Tax)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Tax)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ConfirmOrNot)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ConfirmOrNot)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.PickupOrNot)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PickupOrNot)
        </dd>
        @if (Model.ConfirmOrNot == true)
        {
            <dt>
                @Html.DisplayNameFor(model => model.PickupType)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PickupType)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.PickupDate)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.PickupDate)
            </dd>
        }
        <dt>
            @Html.DisplayNameFor(model => model.RecipientAddressNickname)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RecipientAddressNickname)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RecipientFullName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RecipientFullName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RecipientCompanyName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RecipientCompanyName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RecipientDepartmentName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RecipientDepartmentName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RecipientDeliveryBuilding)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.RecipientDeliveryBuilding)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.RecipientDeliveryStreet)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.RecipientDeliveryStreet)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.RecipientDeliveryCity)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.RecipientDeliveryCity)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.RecipientDeliveryProvince)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.RecipientDeliveryProvince)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.RecipientDeliveryPostcode)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.RecipientDeliveryPostcode)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.RecipientPhoneNumber)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RecipientPhoneNumber)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.RecipientEmail)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.RecipientEmail)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.PickupLocationNickname)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PickupLocationNickname)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.PickupLocation)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.PickupLocation)
        </dd>

    </dl>

    <p>
        @Html.ActionLink("Back to List", "Index")
    </p>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script src="~/Scripts/jquery-ui-timepicker-addon.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $(function () {
                $(".date-time-picker").datetimepicker({
                    changeMonth: true,
                    changeYear: true,
                    yearRange: "-100:+0",
                    dateFormat: 'yy-mm-dd',
                    controlType: 'select',
                    timeFormat: 'HH:mm'
                });
            });

            jQuery.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };
        });

        function AppendUrlParamTokens(url, params) {

            for (var param in params) {
                if (params[param] == null) {
                    delete params[param];
                }
            }

            return url + "?" + jQuery.param(params);
        }

        function OnPickupLocationNicknamesChange(ddl) {
            jQuery.getJSON(AppendUrlParamTokens('@Url.Action("GetPickupLocation", "Shipments")', { PickupLocationNickname: ddl.options[ddl.selectedIndex].value }), function (result) {
                if (result.length != 0) {
                    document.getElementById("PickupLocation_edit").value = result.Location;
                } else {
                    document.getElementById("PickupLocation_edit").value = "";
                }


            });
        };

    </script>
}
